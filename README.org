* SmartRocket iLockVerifier Fronend
** Profile
This project is for iLockVerifier and use key skills: react17, vite2, mobx6,
axios, typescript,react testing library

Note: we should add unit test for each component, all test files are
suffix with '.test.'.
** Project stucture
  | configuration | API environment and vite compile environment |
  |-- env | API environment directory |
  |---- prod.env.js | production environment API configuration |
  |---- rdev.env.js | staging environment API configuration |
  |---- rstaging.env.js | staging environment API configuration |
  |---- rtest.env.js | test environment API configuration |
  |---- sample.env.js | sample environment API configuration for local developer |
  |-- vite.config.base.ts | common vite config |
  |-- vite.config.dev.ts | development vite config |
  |-- vite.config.prod.ts | production vite config |
  |-- vite.config.staging.ts | staging vite config |
  |-- vite.config.test.ts | test vite config |
  | src | all development files |
  |-- api | interactive with backend API |
  |-- components | common components |
  |-- i18n | internationalization |
  |-- interface | common interface defined |
  |-- layouts | common layout |
  |-- lib | thired party library |
  |-- pwa | progress web application for future |
  |-- routes | entire project router |
  |-- schemas | graphQL schema |
  |-- store | status cache |
  |-- theme | theme for entire project |
  |-- utils | common util functions |
  |-- views | all pages |
  |-- App.tsx | page components entry |
  |-- css.d.ts | css configuration |
  |-- main.tsx  | main entry |
  |-- react-i18next.d.ts | Special handle for internationalization |
  |-- reportWeb.tsx | prepare for future |
  |-- setupTests.tsx | unit test entry |
  |-- vite-env.d.ts | vite environment configuration |
  | static | static file directory |
  |-- iconfont | icon font library by UI customize |
  | .editorconfig | edit common rule |
  | .eslintignore | eslint ignore |
  | .eslintrc.js | eslint configuration |
  | .gitignore | git ignore file |
  | .huskrc | husk configuration for commit and push |
  | .travis.yml | continuous integration for production |
  | index.html | entry for project |
  | Makefile | comiple config by make |
  | package.json | project dependency packages and version info |
  | prettierrc | rules for js, ts |
  | README.org | project document |
  | tsconfig.json | typescript compiler options |


** Environment variables

** Build setup
  - Development environment
  #+BEGIN_SRC shell
   npm run r:dev
  #+END_SRC
  - Test environment
  #+BEGIN_SRC shell
   npm run r:test
  #+END_SRC
  - Staging environment
  #+BEGIN_SRC shell
   npm run r:staging
  #+END_SRC
  - Package program
  #+BEGIN_SRC shell
   npm run deploy
   or
   make
  #+END_SRC
  - Format code style 
  #+BEGIN_SRC shell
   npm run lint
  #+END_SRC
  - Format code style with fix solution
  #+BEGIN_SRC shell
   npm run lint:fix
  #+END_SRC
  - Test in development environment
  #+BEGIN_SRC shell
   npm run test:dev
  #+END_SRC
  - Test in test environment
  #+BEGIN_SRC shell
   npm run test:test
  #+END_SRC
  - Test in staging environment
  #+BEGIN_SRC shell
   npm run test:test
  #+END_SRC
  - Test in production environment
  #+BEGIN_SRC shell
   npm run test:prod
  #+END_SRC
  - Test in development environment, and watching all test case
  #+BEGIN_SRC shell
   npm run test:watch
  #+END_SRC
  - Test in development environment, and debug width chrome.After run below
    command and open chrome, input about:inspect
  #+BEGIN_SRC shell
   npm run test:debug
  #+END_SRC
  - Test width reporter 
  #+BEGIN_SRC shell
   npm run test:reporter
  #+END_SRC
  - CI test for production
  #+BEGIN_SRC shell
   npm run ci:test
  #+END_SRC
  - CI deploy for production
  #+BEGIN_SRC shell
   npm run ci:deploy
  #+END_SRC
  - CI test and CI deploy for production
  #+BEGIN_SRC shell
   npm run ci:ilock
  #+END_SRC

